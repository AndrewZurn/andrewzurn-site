AngularJS Against A Play Framework Webservice

So You Want to Build an AngularJS app that Consumes a Webservice?

So I recently decided to build a fun little web app for a social gathering for the athletic/social club I am a member at.  I’ve also recently been playing around with AngularJS, and also the Play Framework building other little apps, and decided it would be fun to put together an app connecting the two to make an interactive experience for the other club members at this social.

The premise of the app is to allow people to add the YouTube videos they would like to see played at this social event, and vote on them, whereupon the video’s with the top votes would be played.  Should be a perfect little project to test how to setup a Play webservice and a AngularJS frontend, and connect the two.

The Play Framework Webservice

So the webservice api needed four operations.

List all the unplayed videos in the database
Vote on a video
Add a new video
Update a video that has been played (thus removing it from the list operation).
play_routes_spac_youtube

And then just a few standard CRUD-like operations against a database called from our Controller.

controller_spac_youtube2 controller_spac_youtube

Finally, lets get this up and running on your server of choice.  I’m on a Digital Ocean Ubuntu 12.04 box, so after a quick upload to my server workspace, a few more commands should get our webservice online. Here is what I’ve used to get my play app running on a given port on the local machine, with some memory bound limits.

$: /usr/andrew/spac-youtube#: ./activator -J-Xms256M -JXmx384M -J-server -Dhttp.port=<em>insert your port here</em> -Dhttp.address=127.0.0.1
This will launch the play frameworks build mechanism, which you will then want to issue the the following two commands.

Stage (will compile your code if any changes to the source are found).

spac_stage

Start

spac_start2

There we go, we’ve got our service up and running. Now lets go check our external facing port and see if we get anything back.

ext_port

There we go, we’re golden! Now, onto the Angular frontend.

 

The AngularJS Front End

Connecting the AngularJS frontend to the Play webservice is super easy, as AngularJS makes it rather easy to scrum up some http calls to the internet.  Really, all we have to do here is write a few lines of code, and expose the response data to the models within our Angular app.

spacControllers.controller('VoteController', ['$scope', '$http', function($scope, $http) {

    /*
    * Get the list of all the videos
    */
    $http.get('http://you-webservice-here/list').success(function(data) {
        var returnList = [];
        for(var i = 0; i < data.length; i++) {
            var returnObj = new Object();
            returnObj.imageUrl = 'http://img.youtube.com/vi/' + data[i].url + '/0.jpg';
            returnObj.url = data[i].url;
            returnObj.wholeUrl = '//www.youtube.com/embed/' + data[i].url;
            returnObj.vote = data[i].vote;
            returnObj.played = data[i].played;
            returnObj.category = data[i].catName;
            getVideoName(data[i].url, i, function(pos, videoName) {
                returnList[pos].videoName = videoName;
            });
            
            returnList[i] = returnObj;
        }
        $scope.videos = returnList;
    });
}
I’m going to leave out the code from the views that implement our model, but it should be pretty straightforward how I went about doing so (repeat through our videos, and display the model data however you’d like to).  But, onward to see how our site turned out!

spac_youtube_page2

That’s it, and not too hard at all!  Have you done something similar, or would like to see or talk more about the code? Let me know!

-Andrew